@using WorkV3.Areas.Backend.ViewModels;
@model AnalysisPageStatLogViewModel
@{
    ViewBag.Title = "條件";
    Layout = "~/Areas/Backend/Views/Shared/_MasterAdminPageLayout.cshtml";
    Pagination pagination = ViewBag.Pagination;
    string UploadUrl = ViewBag.UploadUrl;
    string OrderByColumn = "0", OrderByDesc = "0";
    if (Model.OrderBy.SortDesc == SortDesc.Desc)
    {
        OrderByDesc = "0";
    }
    OrderByColumn = ((int)Model.OrderBy.SortColumn).ToString();
    string CurrentOrderByUrl = Url.Action("PageAnalysisDetails", new { OrderColumn = OrderByColumn, OrderSort = OrderByDesc, PageID = Model.PageID });

    string qType = "main";
    if (!string.IsNullOrEmpty(Request.QueryString["type"]))
    {
        qType = Request.QueryString["type"];
    }
}

@section HArea {
    <title>@ViewBag.Title</title>
    @Styles.Render("~/Css/Card")
    @BundleConfig.StickyTableHeaders()
    @BundleConfig.HighCharts()

}

<div class="groove groove-1">

    <h1 class="title-admin-page">
        <a href="javascript:history.back()"><i class="cc cc-arrow-left"></i></a> 
        條件 @(!string.IsNullOrEmpty(@Model.MenuTitle) ? Model.MenuTitle + " > " : "") 
        
    @(string.IsNullOrWhiteSpace(Model.Title) ? "" : WorkLib.uDataProcess.GetLeftStr(Model.Title, 40, "..."))

    @{
        string color = "#cccccc", labelName = "", exportUrl = "";
        exportUrl = Url.Action("ExportToXLS", new { ID=Model.PageID, Type = qType, SearchStartDate = Model.SearchStartDate, SearchEndDate = Model.SearchEndDate, OrderColumn = OrderByColumn, OrderSort = OrderByDesc });
        if (string.IsNullOrEmpty(qType) || qType == "main")
        {
            color = "#43A047";
            labelName = "瀏覽量";
        }
        else if (qType == "user")
        {
            color = "#ef6c00";
            labelName = "每日瀏覽人次";
        }
        else if (qType == "member")
        {
            color = "#FF1744";
            labelName = "每日會員瀏覽";
        }

        }
    </h1>
    <form id="searchForm" method="post" action="@Url.Action("PageAnalysisDetails", new { type=qType})">
        <div class="analytics-control-bar">
            <div class="selectDateRange" style="float:left;">
                <a class="btn-grey-darken-4-o transparent dropdown-button" href="javascript:" data-activates="choiceDateRange" title="" id="selectedDates"><span id="spDateRange">@(Model.SearchStartDate.ToString("yyyy/MM/dd") + " - " + ((Model.SearchEndDate.Year == Model.SearchStartDate.Year) ? Model.SearchEndDate.ToString("MM/dd") : Model.SearchEndDate.ToString("yyyy/MM/dd")))</span> <i class="cc cc-chevron-down"></i></a>
                <ul id="choiceDateRange" class="dropdown-content customContent full closeOnClick">
                    <li>
                        <input type='hidden' name="SearchStartDate" id="SearchStartDate" value="@Model.SearchStartDate.ToString("yyyy/MM/dd")">
                        <input type='hidden' name="SearchEndDate" id="SearchEndDate" value="@Model.SearchEndDate.ToString("yyyy/MM/dd")">
                        <input type='hidden' name="RangeType" id="RangeType" value="@((int)Model.RangeType).ToString()">
                        <input type='hidden' name="Type" id="Type" value="@qType">
                        <iframe class="dropdownIframe" src="@Url.Action("SelectRangeDate", "Common", new { start = Model.SearchStartDate.ToString("yyyy/MM/dd"), end=Model.SearchEndDate.ToString("yyyy/MM/dd"), select=(int)Model.RangeType })" frameborder="0"></iframe>
                    </li>
                </ul>
            </div>
            <div class="selectCreator">
                <input type="checkbox" id="IsShowCustomLableLine" name="IsShowCustomLableLine" @((Model != null) ? (Model.IsShowCustomLableLine ? "checked" : string.Empty) : string.Empty ) />
                <a href="@Url.Action("CustomLabelLine", "Analysis")" class="btn-grey-o modify_label_line my-openEdit-m"><i class="cc cc-edit"></i>自訂標線</a>
                <a href="@Html.Raw(exportUrl)" class="btn-grey-o"><i class="cc cc-playlist-play"></i>匯出統計</a>
            </div>
        </div>

        <div class="charts">
            <div class="chart-line highcharts"></div>
        </div>
        <div class="chartContent">
            <span>@labelName</span>
            <a href="" style="color: @color");">@Model.TotalViewCount.ToString("N0")</a>
        </div>
        @if (string.IsNullOrEmpty(qType) || qType == "main")
        {
            @Html.Partial("PageAnalysisViewList", Model)
        }
        else if (qType == "user")
        {
            @Html.Partial("PageAnalysisViewUserList", Model)
        }
        else if (qType == "member")
        {
            @Html.Partial("PageAnalysisViewMemberList", Model)
        }
    </form>
</div>
<link href="~/css/Cards/Analytics/style1.css" rel="stylesheet" />
<link href="~/css/forms.css" rel="stylesheet" type="text/css" />
<link href="~/css/vendor/rangeDatePicker/rangeDatePicker.css" rel="stylesheet" type="text/css" />
<script src="~/script/rangeDatePicker/datepicker.js" type="text/javascript"></script>

    <script type="text/javascript">

        $(function () {
           
            $(".my-openEdit-m").colorbox({
                width: "600",
                height: "95%",
                right: "20",
                iframe: true,
                transition: false,
                speed: 0,
                fadeOut: 100,
                createIframe: function () {
                    var iframe = document.createElement('iframe');
                    var attrs = $(this).data('cbox-iframe-attrs');

                    if (typeof attrs === 'object') {
                        $.each(attrs, function (key, val) {
                            iframe[key] = val;
                        });
                    }

                    if ('frameBorder' in iframe) {
                        iframe.frameBorder = 0;
                    }
                    if ('allowTransparency' in iframe) {
                        iframe.allowTransparency = "true";
                    }
                    iframe.name = "EidtConditionInfo"; // give the iframe a unique name to prevent caching
                    iframe.allowFullscreen = true;

                    return iframe;
                }
            });

            // $(".fixTable").stickyTableHeaders();

            $('.dropdown-button').dropdown({
                constrainWidth: false,
                stopPropagation: true
            });
            $('.dropdown-content.closeOnClick').on('click', function(e){
                e.stopPropagation();
            });


        });

        function setSelectedDateRange(startdate, enddate) {
            var selectedDate = startdate;
            if (startdate.split("/")[0] == enddate.split("/")[0])
                selectedDate += " - " + enddate.split("/")[1] + "/" + enddate.split("/")[2];
            else
                selectedDate += " - " + enddate;
            $("#SearchStartDate").val(startdate);
            $("#SearchEndDate").val(enddate);
            $("#spDateRange").html(selectedDate);
            $('#choiceDateRange').hide();
            $("#searchForm").submit();
        }
        $(function () {
            var dateArray = [], dailayTotalViews = [], statistic_celling = [], plot_lines = [];
            var range_max = 0, range_min = 0, celling_interval = 100;
            @if (Model.LogDailyList != null && Model.LogDailyList.Count() > 0)
            {
                int cell_interval = 100;
                long max = 0, min = 0;
                for (int i = 0; i < Model.LogDailyList.Count(); i++)
                {
                    AnalysisDailyLogViewModel daily_item = Model.LogDailyList.ElementAt(i);
                    if (Model.IsShowCustomLableLine)
                    {
                        for (int m = 0; m < Model.LabelLineList.Count(); m++)
                        {
                            AnalysisLogCustomLabelLineViewModel label_item = Model.LabelLineList.ElementAt(m);

                            if (label_item.LabelDate == daily_item.LogDate)
                            {
                                <text>
                        var plotLineOption = {
                            color: '@label_item.LabelColor',
                            width: 2,
                            value: @i.ToString(),
                            label: {
                                text: '@label_item.Title',
                                verticalAlign: 'top',
                                textAlign: 'center',
                                rotation: 0,
                                y: -20,
                            }
                        };
                                plot_lines.push(plotLineOption);
                                </text>
                            }
                        }
                    }
                    <text>
            dateArray.push("@daily_item.LogDate");
                    dailayTotalViews.push(@daily_item.TotalViewCount);
                    </text>
                    max =Math.Max(daily_item.TotalViewCount, max);
                }
                if (max < 100)
                {
                    cell_interval = 10;
                }
                int cell_count = (int)(max / cell_interval);
                if (max % cell_interval != 0)
                {
                    cell_count++;
                }
                for (int i = 0; i <= cell_count; i++)
                {
                    <text>
                statistic_celling.push(@(cell_interval * i))
                </text>
                }
                max = cell_count * cell_interval;
                <text>
            range_max=@max;
                range_min=@min;
                celling_interval =@cell_interval;
                </text>
            }

            $('.chart-line').highcharts({
                chart: {
                    height: 500,
                    /*style: {
                        padding: '30px 0 20px'
                    },*/
                    type: 'line',
                    spacingTop: 50
                },
                title: {
                    text: null,
                },
                subtitle: {
                    text: null,
                },
                /*legend: {
                    enabled: false
                },*/
                xAxis: {
                    title: {
                        text: '日期',
                        margin: 20
                    },
                    categories: dateArray,
                    tickmarkPlacement: 'on',
                    labels: {
                        style: {
                            fontSize: '18px'
                        },
                    },
                    plotLines: plot_lines
                },
                yAxis: {
                    min: range_min,
                    max: range_max,
                    tickInterval: celling_interval,
                    title: {
                        text: '瀏量',
                        rotation: 0,
                        align: 'high',
                        offset: 0,
                        y: -20,
                        x: -15
                    },
                    categories: statistic_celling,
                    labels: {
                        style: {
                            fontSize: '18px'
                        }
                    },
                    maxPadding: 0.05
                },
                series: 
                [{
                    name: '@labelName',
                    data: dailayTotalViews,
                    marker: {
                        enabled: false
                    },
                    // lineWidth:5,
                    color: '@color',
                    zIndex: 2
                }]
            });
        });
    </script>
